'''
Итератор CardDeck
Реализуйте класс CardDeck, порождающий итераторы, конструктор которого 
не принимает никаких аргументов.

Итератор класса CardDeck должен генерировать последовательность из 
52
52 игральных карт, а после возбуждать исключение StopIteration. 
Каждая карта должна представлять собой строку в следующем формате:

<номинал> <масть>
Например, 7 пик, валет треф, дама бубен, король червей, туз пик.

Примечание 1. Карты, генерируемые итератором, должны располагаться сначала 
по величине номинала, затем масти.

Примечание 2. Старшинство мастей по возрастанию: пики, трефы, бубны, червы. 
Старшинство карт в масти по возрастанию: 
двойка, тройка, четверка, пятерка, шестерка, семерка, восьмерка, девятка, десятка, валет, дама, король, туз.

Примечание 3. Масти не требуют склонения и независимо от номинала должны 
сохранять следующее написание: пик, треф, бубен, червей.
'''
# suits = ['пик', 'треф', 'бубен', 'червей']

# number_cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'валет', 'дама', 'король', 'туз']

# deck = list()

# for suit in suits:
#     for card in number_cards:
#         deck.append(f'{card} {suit}')

# print(deck)        

class CardDeck():
    suits = ['пик', 'треф', 'бубен', 'червей']
    number_cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'валет', 'дама', 'король', 'туз']

    def __init__(self):
        self.deck = iter([f'{i} {j}' for j in self.suits for i in self.number_cards])
    

    def __iter__(self):
        return self
    
    def __next__(self):
        return next(self.deck)
    

cards = list(CardDeck())

print(cards[9])
print(cards[23])
print(cards[37])
print(cards[51]) 