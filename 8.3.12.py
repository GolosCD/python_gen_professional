 '''
 Выберем натуральное число 
�
=
16
n=16 и будем вычитать из него число 
5
5, пока оно не перестанет быть положительным:

16
−
5
=
11
16−5=11
11
−
5
=
6
11−5=6
6
−
5
=
1
6−5=1
1
−
5
=
−
4
1−5=−4
Исходное число 
�
n после четырех вычитаний перестало быть положительным и стало равным 
−
4
−4. Теперь будем прибавлять к нему число 
5
5, пока оно снова не станет равным 
�
n:

−
4
+
5
 
=
1
−4+5 =1

1+ 5=6

6 + 5=11

11+5 =16
Напишите программу с использованием рекурсии, которая принимает на вход число 
�
n и вычитает из него число 
5
5, пока оно не перестанет быть положительным, а затем прибавляет к нему число 
5
5, пока оно снова не станет равным 
�
n.

Формат входных данных
На вход программе подается натуральное число.

Формат выходных данных
Программа должна выполнить алгоритм, представленный в условии задачи, и вывести все результаты арифметических операций, произведенных с введенным числом, каждый на отдельной строке.

Примечание 1. Обратите внимание, что в начале и в конце выводится исходное число 
�
n.

Примечание 2. Тестовые данные доступны по ссылкам:

Архив с тестами
GitHub
Sample Input 1:

16
Sample Output 1:

16
11
6
1
-4
1
6
11
16
 
 '''




# Мое решение, забыл про раскручивание стека рекурсии в обратку и написал лишнюю колбасу
def no_cicle(n:int)->int:
    def cic (num:int,t:int=0):
        if num>0 and t==0:
            print(num)
            return cic(num-5,t)
        elif n==num:
            print(num)
        elif num<=0 and t==0:
            print(num)
            return cic(num+5,t=1)
        elif num<=0 and t==1:
            print(num)
            return cic(num+5,t)
        elif num>0 and t==1:
            print(num)
            return cic(num+5,t)

    cic(n)
        

no_cicle(int(input()))



n=16
# Решение учителя...всечетко 
def no_cicle(num:int)->int:
    print(num)
    if num>0:
        no_cicle(num-5)
        print(num)
        

no_cicle(n)        
