'''
В онлайн-школе BEEGEEK каждое лето проходят соревнования по шахматам, во время которых ведется статистика побед и поражений. Каждая партия описывается кортежем из двух элементов, где первый элемент — имя победившего ученика, второй элемент — имя проигравшего ученика.

Реализуйте функцию wins(), которая принимает один аргумент:

pairs — итерируемый объект, элементами которого являются кортежи, каждый из которых представляет собой пару имён победитель-проигравший
Функция должна возвращать словарь, в котором ключом служит имя ученика, а значением — множество (тип set) имен учеников, которых он победил.

Примечание 1. Гарантируется, что каждая партия заканчивается победой одного из учеников, то есть ничьей быть не может.

Примечание 2. Элементы в возвращаемом функцией словаре могут располагаться в произвольном порядке.

Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию wins(), но не код, вызывающий ее.

Примечание 4. Тестовые данные доступны по ссылкам:

Архив с тестами
GitHub
Sample Input 1:

result = wins([('Тимур', 'Артур'), ('Тимур', 'Дима'), ('Дима', 'Артур')])

for winner, losers in sorted(result.items()):
    print(winner, '->', *sorted(losers))
Sample Output 1:

Дима -> Артур
Тимур -> Артур Дима
Sample Input 2:

result = wins([('Артур', 'Дима'), ('Артур', 'Тимур'), ('Артур', 'Анри'), ('Дима', 'Артур')])

for winner, losers in sorted(result.items()):
    print(winner, '->', *sorted(losers))
Sample Output 2:

Артур -> Анри Дима Тимур
Дима -> Артур
'''

from collections import defaultdict

def wins(dict_payers:list):

    result_dict = defaultdict(set)

    for name_win in dict_payers:
        result_dict[name_win[0]].add(name_win[1]);
        
    return result_dict    
        
    
    
result = wins([('Тимур', 'Артур'), ('Тимур', 'Дима'), ('Дима', 'Артур')])

for winner, losers in sorted(result.items()):
    print(winner, '->', *sorted(losers))    