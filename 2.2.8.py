В онлайн-школе "BEEGEEK" сотрудникам положена корпоративная почта, которая формируется как <имя-фамилия>@beegeek.bzz, например, timyr-guev@beegeek.bzz. При таком подходе существует проблема тёзок. Для решения такой проблемы было решено приписывать справа номер.

Тогда первый Тимур Гуев получает ящик timyr-guev@beegeek.bzz (без номера), второй — timyr-guev1@beegeek.bzz, третий — timyr-guev2@beegeek.bzz, и так далее.

Вам дан список уже занятых ящиков в порядке их выдачи и имена-фамилии новых сотрудников в заранее подготовленном виде (латиницей с символом - между ними). Напишите программу, которая раздает корпоративные ящики новым сотрудникам школы.

Формат входных данных
На вход программе в первой строке подается целое неотрицательное число nn — количество выданных ящиков. В следующих nn строках перечислены сами ящики в порядке выдачи, по одному на строке. На следующей строке задано целое неотрицательное число mm — количество новых сотрудников, которым нужно раздать корпоративные ящики. Каждая из последующих mm строк представляет собой имя и фамилию сотрудника в подготовленном к использованию формате.

Формат выходных данных
Программа должна вывести почтовые ящики (mm строк) для новых сотрудников в том порядке, в котором они раздавались.

Примечание. Тестовые данные доступны по ссылкам:

end_mail = '@beegeek.bzz'

result_list: list = list()

#хранит текущие адреса    
list_name: list = list()
    
#хранит новый список адресов для проверки    
find_name: list = list()    

#прочитали текущие адреса и сложили в список  
for _ in range(int(input())):
    list_name.append(input())
    
#прочитали новые адреса и сложили в список    
for _ in range(int(input())):
    find_name.append(input())

#считаем суммарно сколько раз встречается имя в обоих списках
#для этого создаем общий словарь
name_dict: dict = dict()

#Добавляем словарь текущие имена
for mail in list_name:
    
    full_mail = mail[:-12]
    
    last_char = full_mail[-1]
    
    if last_char.isdigit():
        name = full_mail[:-1]
    else:
        name = full_mail
        
    name_dict[name] = name_dict.get(name,0)+1

#Добавлем новые имена
for name in find_name:        
    name_dict[name] = name_dict.get(name,0)+1
    
#Печатаем итоги попутно считая слова    
for print_name in find_name:
    for i in range(name_dict.get(print_name)):
        if i ==0:
            check_name =print_name+end_mail           
        else:
            check_name =print_name+str(i)+end_mail
        if check_name in list_name or check_name in result_list:
            continue
        else:
            result_list.append(check_name)

print(*result_list,sep='\n')            