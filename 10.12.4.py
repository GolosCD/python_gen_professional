'''
Задача о рюкзаке
Вам доступен список items, содержащий набор предметов. Каждый предмет представлен в виде именованного кортежа и имеет три параметра — название, массу (в граммах) и ценность (в рублях). 
Также имеется рюкзак определённой грузоподъёмности.

Напишите программу, которая определяет, какие предметы из представленного набора следует взять, 
чтобы собрать рюкзак с максимальной ценностью предметов внутри, соблюдая при этом весовое ограничение рюкзака.

Формат входных данных
На вход программе в первой строке подается число — грузоподъемность рюкзака (в граммах).

Формат выходных данных
Программа должна определить какие предметы из представленного набора следует взять, чтобы собрать рюкзак с максимальной ценностью предметов внутри, 
соблюдая при этом весовое ограничение рюкзака, и вывести названия полученных предметов в лексикографическом порядке, каждое на отдельной строке. 
Если рюкзак не позволяет взять ни один предмет, программа должна вывести текст:

Рюкзак собрать не удастся
Примечание 1. Рюкзак не обязательно должен быть наполнен полностью.

Примечание 2. Подробнее с задачей о рюкзаке можно ознакомиться по ссылке.
   [Item(name='Ноутбук',                  mass=2000, price= 150 000), 
    Item(name='Золотая монета',           mass=8,    price= 140 000), 
    Item(name='Мобильный телефон',        mass=200,  price= 110 000), 
    Item(name='Лимитированные кроссовки', mass=300,  price= 80 000), 
    Item(name='Фотоаппарат',              mass=720,  price= 79 000), 
    Item(name='Обручальное кольцо',       mass=7,    price= 49 000), 
    Item(name='Ручка Паркер',             mass=20,   price= 37 000), 
    Item(name='Гитара',                   mass=1500, price= 32 000), 
    Item(name='Статуэтка Оскар',          mass=4000, price= 28 000), 
    Item(name='Наушники',                 mass=150,  price= 11 000)]

'''
from collections import namedtuple
import itertools as it

Item = namedtuple('Item', ['name', 'mass', 'price'])

items = [Item('Обручальное кольцо'      , 7,    49_000),
         Item('Мобильный телефон'       , 200,  110_000),
         Item('Ноутбук'                 , 2000, 150_000),
         Item('Ручка Паркер'            , 20,   37_000),
         Item('Статуэтка Оскар'         , 4000, 28_000),
         Item('Наушники'                , 150,  11_000),
         Item('Гитара'                  , 1500, 32_000),
         Item('Золотая монета'          , 8,    140_000),
         Item('Фотоаппарат'             , 720,  79_000),
         Item('Лимитированные кроссовки', 300,  80_000)]



def my_inventory(w: int,items :list):
    #Сортируем наш кортеж для дальнейших манипуляций
    items = sorted(items,key = lambda x: x.price, reverse = True)
    
    #Берем только вес наших товаров
    only_weight = tuple(i.mass for i in items) #только вес
    
    #создадим словарь который от введенного веса, даст понимание сколько вещей минимум может внего влезть. 
    #понимание минимума скажет нам верхнюю границу кол-ва элементов в кортеже при комбинирование
    min_weight_dict = dict()
    
    #Веса сортируем от меньшего к большему, что бы посчитать минимальные веса для кол-ва предметов
    min_sort_list =sorted(only_weight)
    
    #если введенный вес меньше минимального из вещей, то ...
    if w<min_sort_list[0]:
        print('Рюкзак собрать не удастся') #останавливаем программу
    else:    
        #Создаем словарь где для каждого минимального веса, будет расчитываться максимальное кол-во предметов
        for index,val in enumerate(min_sort_list,start =1):
            min_weight_dict.setdefault(sum(min_sort_list[0:index]),index)
         
        for i in range(1,11):
            for key in min_weight_dict:
                if w>key:
                    max_cont_combine = min_weight_dict.get(key) #посчитали, сколько может быть максимально вещей от введенного веса
        
        test_set = set()
        
        #для оптимизации ограничиваем кол-во комбинацей нашим максимальным кол-вом
        for i in range(1,max_cont_combine+1):        
            [test_set.add(i) for i in it.combinations(only_weight,r=i) if sum(i)<w]
            
        #тут хранится список все возможных комбинаций предметов в инветаре    
        result = list()
        for test_bag in test_set:
            tmp_list = list()
            for val in items:
                if val.mass in test_bag:
                    tmp_list.append((val.name,val.price))
            result.append(tmp_list)        
                    
        #Функция для расчета суммы золота по каждой коминации, нужны для сортировки            
        def summa (seq):
            sm = 0
            for s in seq:
                sm+=s[1]
            return sm    
        
        #когда получили список всех комбинаций, выбираем только ту которая дает максимальное золото и печатаем
        for i in sorted(max(result,key = summa),key = lambda x: x[0]):
            print(i[0])

if __name__=='__main__':
    
    n = int(input())
    
    my_inventory(n,items)

'''
Гитара
Золотая монета
Лимитированные кроссовки
Мобильный телефон
Наушники
Ноутбук
Обручальное кольцо
Ручка Паркер
Статуэтка Оскар
Фотоаппарат
'''


'''
# INPUT DATA:

# TEST_1:
500

# TEST_2:
1

# TEST_3:
10

# TEST_4:
100

# TEST_5:
200

# TEST_6:
1000

# TEST_7:
1500

# TEST_8:
2000

# TEST_9:
2500

# TEST_10:
3000

# TEST_11:
3500

# TEST_12:
4000

# TEST_13:
7000

# TEST_14:
5000

# TEST_15:
9000

# TEST_16:
400

# TEST_17:
600

# TEST_18:
700

# TEST_19:
1200

# TEST_20:
1300
'''